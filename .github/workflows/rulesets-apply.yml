name: Apply Rulesets

on:
  workflow_call:
    inputs:
      search_repos:
        description: 'gh search repos query, e.g. org:digital-iq is:private'
        required: true
        type: string
      rulesets_paths:
        description: 'newline-separated list of rulesets JSON paths'
        required: true
        type: string

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN != '' && secrets.GH_TOKEN || github.token }}
      SEARCH_REPOS:    ${{ inputs.search_repos }}
      RULESETS_PATHS:  ${{ inputs.rulesets_paths }}
    steps:
      - uses: actions/checkout@v4

      - name: Resolve repositories
        shell: bash
        run: |
          set -euo pipefail
          gh search repos $SEARCH_REPOS --json fullName -q '.[].fullName' > repos.txt
          [ -s repos.txt ] || { echo "No repositories matched the search SEARCH_REPOS."; exit 1; }

      - name: Apply rulesets
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t RULESETS < <(printf '%s\n' "$RULESETS_PATHS" | sed '/^\s*$/d')

          RULESETS_NAMES=()
          for P in "${RULESETS[@]}"; do
            [ -f "$P" ] || { echo "Ruleset file not found: $P"; exit 1; }
            NAME=$(jq -r '.name // empty' "$P")
            [ -n "$NAME" ] || { echo "Ruleset JSON must contain .name: $P"; exit 1; }
            RULESETS_NAMES+=("$NAME")
          done

          while IFS= read -r FULL; do
            OWNER="${FULL%/*}"; REPO="${FULL#*/}"
            echo "::group::${FULL}"
            for i in "${!RULESETS[@]}"; do
              R="${RULESETS[$i]}"; NAME="${RULESETS_NAMES[$i]}"
              RS_ID=$(gh api "/repos/${OWNER}/${REPO}/rulesets?per_page=100" \
                        --jq ".[] | select(.name==\"${NAME}\") | .id" 2>/dev/null || true)
              if [ -n "$RS_ID" ]; then
                echo "[skip] ${FULL} :: ruleset \"${NAME}\" already exists (id=${RS_ID})"
                continue
              fi
              if gh api -X POST "/repos/${OWNER}/${REPO}/rulesets" --input "$P" >/dev/null 2>&1; then
                echo "[created] ${FULL} :: ${NAME}"
              else
                echo "::error::Create failed for ${FULL} (ruleset: ${R})"
              fi
            done
            echo "::endgroup::"
          done < repos.txt
