name: Apply Rulesets

on:
  workflow_call:
    inputs:
      search_repos:
        description: 'gh search repos query, e.g. org:digital-iq is:private'
        required: true
        type: string
      rulesets_paths:
        description: 'newline-separated list of rulesets JSON paths'
        required: true
        type: string

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN != '' && secrets.GH_TOKEN || github.token }}
      SEARCH_REPOS:    ${{ inputs.search_repos }}
      RULESETS_PATHS:  ${{ inputs.rulesets_paths }}
    steps:
      - uses: actions/checkout@v4

      - name: Resolve repositories
        shell: bash
        run: |
          set -euo pipefail
          gh search repos $SEARCH_REPOS --json fullName -q '.[].fullName' > repos.txt
          [ -s repos.txt ] || { echo "No repositories matched the search SEARCH_REPOS."; exit 1; }

      - name: Reset & apply rulesets
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t RULESETS < <(printf '%s\n' "$RULESETS_PATHS" | sed '/^\s*$/d')
          if [ "${#RULESETS[@]}" -eq 0 ]; then
            echo "::error::No ruleset paths provided via RULESETS_PATHS"
            exit 1
          fi
          for P in "${RULESETS[@]}"; do
            [ -f "$P" ] || { echo "::error::Ruleset file not found: $P"; exit 1; }
          done

          while IFS= read -r FULL; do
            OWNER="${FULL%/*}"; REPO="${FULL#*/}"
            echo "::group::${FULL}"

            IDS="$(gh api --paginate "/repos/${OWNER}/${REPO}/rulesets?per_page=100" --jq '.[].id' || true)"
            if [ -n "$IDS" ]; then
              while IFS= read -r ID; do
                [ -n "$ID" ] || continue
                gh api -X DELETE "/repos/${OWNER}/${REPO}/rulesets/${ID}" >/dev/null
                echo "[deleted] ruleset id=${ID}"
              done <<< "$IDS"
            else
              echo "[info] no existing rulesets"
            fi

            for P in "${RULESETS[@]}"; do
              gh api -X POST "/repos/${OWNER}/${REPO}/rulesets" --input "$P" >/dev/null
              echo "[created] $(basename "$P")"
            done

            echo "::endgroup::"
          done < repos.txt
