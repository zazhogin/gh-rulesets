name: Apply rulesets by query

on:
  workflow_call:
    inputs:
      search_query:
        description: 'gh search repos query, e.g. org:digital-iq is:private'
        required: true
        type: string
      policy_path:
        description: 'Path to policy JSON, e.g. policies/ansible-playbooks.json'
        required: true
        type: string

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.POLICY_TOKEN != '' && secrets.POLICY_TOKEN || github.token }}
      QUERY:   ${{ inputs.search_query }}
      POLICY:  ${{ inputs.policy_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Policy
        shell: bash
        run: |
          set -euo pipefail
          test -f "$POLICY" || { echo "Policy file not found: $POLICY"; exit 1; }
          NAME=$(jq -r '.name' "$POLICY")
          [ -n "$NAME" ] && [ "$NAME" != "null" ] || { echo "Policy JSON must contain .name"; exit 1; }
          echo "POLICY_NAME=$NAME" >> $GITHUB_ENV

      - name: Resolve repositories
        id: repos
        shell: bash
        run: |
          set -euo pipefail
          echo "Query: $QUERY"
          gh search repos $QUERY --json nameWithOwner -q '.[].nameWithOwner' > repos.txt
          COUNT=$(wc -l < repos.txt | tr -d ' ')
          echo "found=$COUNT" >> "$GITHUB_OUTPUT"
          [ "$COUNT" -gt 0 ] || { echo "No repositories matched the search query."; exit 1; }

      - name: Apply Policy
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r FULL; do
            OWNER="${FULL%/*}"; REPO="${FULL#*/}"
            echo "::group::${FULL}"
            RS_ID=$(gh api "/repos/${OWNER}/${REPO}/rulesets?per_page=100" \
                      --jq ".[] | select(.name==\"${POLICY_NAME}\") | .id" 2>/dev/null || true)
            if [ -n "$RS_ID" ]; then
              echo "[skip] ${FULL} :: ruleset \"${POLICY_NAME}\" already exists (id=${RS_ID})"
              echo "::endgroup::"; continue
            fi
            if gh api -X POST "/repos/${OWNER}/${REPO}/rulesets" --input "$POLICY" >/dev/null 2>&1; then
              echo "[created] ${FULL} :: ${POLICY_NAME}"
            else
              echo "::error::Create failed for ${FULL}"
            fi
            echo "::endgroup::"
          done < repos.txt
      
